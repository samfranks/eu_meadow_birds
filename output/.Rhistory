## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],
newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link (logistic) function: could also use plogis()
linkinv <- model@resp$family$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(lwr=pred0-crit*pred.se,
upr=pred0+crit*pred.se))
}
#=================================  SET DIRECTORY STRUCTURE  ================================
# LOCAL
if(.Platform$OS =='windows') {
cluster <- FALSE
Mac <- FALSE
}
# HPCBTO
if(.Platform$OS=='unix' & Sys.getenv('USER')=='samf') {
cluster <- TRUE
Mac <- FALSE
Wales <- FALSE
}
# Mac
if(.Platform$OS=='unix' & Sys.getenv('USER')=='samantha') {
cluster <- FALSE
Mac <- TRUE
Wales <- FALSE
}
#### SET DIRECTORY PATHS
# # Wales HPC cluster
# if (cluster) parentwd <- c("/home/samantha.franks/")
if (cluster) parentwd <- c("/users1/samf") # BTO cluster
if (!cluster) {
if (!Mac) parentwd <- c("C:/Users/samf/Documents/Git/eu_meadow_birds")
if (Mac) parentwd <- c("/Volumes/SAM250GB/BTO PC Documents/Git/eu_meadow_birds")
}
scriptswd <- paste(parentwd, "scripts", sep="/")
datawd <- paste(parentwd, "data", sep="/")
outputwd <- paste(parentwd, "output", sep="/")
workspacewd <- paste(parentwd, "workspaces", sep="/")
options(digits=6)
#=================================  LOAD DATA  ===============================
dat0 <- readRDS(paste(workspacewd, "meadow birds analysis dataset_full.rds", sep="/"))
mgmtvars <- c("AE","AE.level","reserve.desig","mowing","grazing","fertpest","nest.protect","predator.control","water")
# subset dataset for analysis to desired columns only
dat1 <- subset(dat0, select=c("reference","lit.type","score","country","study.length","habitat","species","overall.metric","metric","specific.metric","stan.metric","sample.size","analysis2","success","stan.calc","stan.metric.before","stan.metric.after","stan.effect.size","sig","effect.dir",mgmtvars))
# subset dataset to include records with effect sizes measured (whatever the significance of the effect)
dat2 <- subset(dat1, stan.effect.size!="" & stan.effect.size!="#DIV/0!")
dat2$stan.effect.size <- as.numeric(as.character(dat2$stan.effect.size))
dat2 <- droplevels(dat2)
hist(dat2$stan.effect.size)
###*** Long right-tail on the distribution, some very large positive effects
dat <- dat2
#------------  Recode management variables as factors for analysis and make 'none' the reference level -----------------
for (i in 1:length(mgmtvars)) {
dat[,mgmtvars[i]] <- as.factor(dat[,mgmtvars[i]])
dat[,mgmtvars[i]] <- relevel(dat[,mgmtvars[i]], ref="none")
print(levels(dat[,mgmtvars[i]]))
}
#=================================  ANALYSIS  ===============================
# can combine standardised abundance metrics - effect sizes comparable
# combine chick survival standardised metrics - effect sizes comparable
dat$new.stan.metric <- ifelse(grepl("chick survival", dat$stan.metric), "chick survival", ifelse(grepl("number of", dat$stan.metric), "abundance", as.character(dat$stan.metric)))
# metrics to test - other metrics have sample sizes which are too small
metrics <- c("abundance","multiplicative yearly slope","nest survival (Mayfield)")
###----  Nuisance variables, all metrics pooled ----###
nui.dat <- unique(dat[,c("reference","study.length","sample.size","analysis2","lit.type","stan.effect.size")])
# use unique dataset only to test effect sizes (replication because of multiple records of same study)
m.nui1 <- lme(stan.effect.size ~ study.length + sample.size + analysis2 + lit.type, random = ~1|reference, data=nui.dat)
summary(m.nui1)
# no significant effects of any variable on whole dataset (metrics pooled)
###----  Nuisance variables, individual metric subsets ----###
nui.dat <- unique(dat[,c("reference","study.length","sample.size","analysis2","lit.type","stan.effect.size","new.stan.metric")])
m.nui2 <- list()
m.nui2.dat <- list()
for (i in 1:length(metrics)) {
print(metrics[i])
mdat <- subset(nui.dat, new.stan.metric==metrics[i])
mdat <- droplevels(mdat)
m.nui2.dat[[i]] <- mdat
print(nrow(mdat))
m.nui2[[i]] <- lme(stan.effect.size ~ study.length + sample.size + analysis2 + lit.type, random = ~ 1|reference, data=mdat)
}
names(m.nui2) <- metrics
lapply(m.nui2, summary)
# abundance: no significant effects of any nuisance variables
# abundance change: no significant effects of any nuisance variables
# nest survival: significant effect of lit.type (negative effect of primary literature)
# tried to include 'score' as an additional variable but creates singularities in the model
mod.high <- readRDS(mod.high, file=paste(workspacewd, "models_1a.rds", sep="/"))
mod.high <- readRDS(file=paste(workspacewd, "models_1a.rds", sep="/"))
mod.spec <- readRDS(file=paste(workspacewd, "models_1b.rds", sep="/"))
mod.prod.high <- readRDS(file=paste(workspacewd, "models_1c.rds", sep="/"))
mod.prod.spec <- readRDS(file=paste(workspacewd, "models_1d.rds", sep="/"))
mdat.prod.high <- subset(dat, metric=="productivity" & new.stan.metric!="proportion pairs with chicks" & stan.effect.size < 30 & species!="curlew" & species!="dunlin" & AE.level!="basic")
mod.prod.high <- lme(stan.effect.size ~ AE.level + species + new.stan.metric, random= ~1|reference, data=mdat.prod.high)
summary(mod.prod.high)
mdat.prod.spec <- subset(dat, metric=="productivity" & new.stan.metric!="proportion pairs with chicks" & stan.effect.size < 30 & species!="curlew" & species!="dunlin" & mowing!="applied" & grazing!="reduced")
mod.prod.spec <- lme(stan.effect.size ~ mowing + grazing + nest.protect + species + new.stan.metric, random= ~1|reference, data=mdat.prod.spec)
summary(mod.prod.spec)
saveRDS(mdat.prod.high, file=paste(workspacewd, "model dataset_1c.rds", sep="/"))
saveRDS(mdat.prod.spec, file=paste(workspacewd, "model dataset_1d.rds", sep="/"))
saveRDS(mod.prod.high, file=paste(workspacewd, "models_1c.rds", sep="/"))
saveRDS(mod.prod.spec, file=paste(workspacewd, "models_1d.rds", sep="/"))
### Read dataset
moddat <- readRDS(file=paste(workspacewd, "model dataset_1a-b.rds", sep="/"))
mdat.prod.high <- readRDS(file=paste(workspacewd, "model dataset_1c.rds", sep="/"))
mdat.prod.spec <- readRDS(file=paste(workspacewd, "model dataset_1d.rds", sep="/"))
mod.high <- readRDS(file=paste(workspacewd, "models_1a.rds", sep="/"))
mod.spec <- readRDS(file=paste(workspacewd, "models_1b.rds", sep="/"))
mod.prod.high <- readRDS(file=paste(workspacewd, "models_1c.rds", sep="/"))
mod.prod.spec <- readRDS(file=paste(workspacewd, "models_1d.rds", sep="/"))
mod.high
lapply(mod.high, summary)
# random effects not needed for new prediction
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
newdat <- origdat[,c("stan.effect.size", "species", mgmtvars)] # create new dataset with species
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
# new dataset contains all of the unique combinations of the different management interventions, replicated across the range of observed effect sizes for the dataset, replicated across species
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
seq.effect.size <- seq(min(origdat$stan.effect.size), max(origdat$stan.effect.size), 0.1) # sequence of the range of effect sizes
x <- unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), each=length(seq.effect.size)),] # replicate each row of unique mgmtvars to the length of the effect size sequence
effect.mgmt <- data.frame(stan.effect.size=rep(seq.effect.size, times=nrow(unique.mgmtvars)), x) # merge effect sizes sequence and mgmtvars, now a unique combination of everything
newdat <- data.frame(effect.mgmt[rep(seq_len(nrow(effect.mgmt)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(effect.mgmt))) # replicate the whole dataset for each species
newdat$pred <- predict(plotmod, level=0, newdat)
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
newdat
newdat$pred <- predict(plotmod, level=0, newdat)
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
head(newdat)
mod.high[[1]]
plotmod <- mod.spec[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
newdat$pred <- predict(plotmod, level=0, newdat)
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
plotmod
i
i<-1
plotmod <- mod.spec[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
newdat$pred <- predict(plotmod, level=0, newdat)
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
head(newdat)
summary(plotmod)
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
newdat$pred <- predict(plotmod, level=0, newdat)
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
head(newdat)
fits <- unique(newdat)
str(newdat)
str(fits)
fits <- newdat[,c("AE.leve","reserve.desig","species","pred","SE","SE2")]
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE","SE2")]
head(fits)
fits <- unique(fits)
str(fits)
fits
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE")]
plotdat[[i]] <- aggregate(fits[,c("pred","SE")], by=list(fits[,c("AE.level","reserve.desig")]), mean)
str(fits)
newdat$pred <- as.numeric(predict(plotmod, level=0, newdat))
head(newdat)
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE")]
fits <- unique(fits)
head(fits)
str(fits)
aggregate(fits[,c("pred","SE")], by=list(fits[,c("AE.level","reserve.desig")]), mean)
plotdat[[i]] <- aggregate(fits[,c("pred","SE")], by=list(fits[,c("AE.level")]), mean)
aggregate(fits[,c("pred","SE")], by=list(fits[,c("AE.level")]), mean)
fits
aggregate(fits[,c("pred","SE")], by=list(fits$AE.level, fits$reserve.desig), mean)
plotdat <- list()
plotdat[[i]] <- aggregate(fits[,c("pred","SE")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
plotdat[[i]]
save.image("/Volumes/SAM250GB/BTO PC Documents/Git/eu_meadow_birds/workspaces/session 20160615.RData")
load("/Volumes/SAM250GB/BTO PC Documents/Git/eu_meadow_birds/workspaces/session 20160615.RData")
#=================================  LOAD PACKAGES =================================
list.of.packages <- c("MASS","reshape","raster","sp","rgeos","rgdal","lme4","car","blme","tidyr","nlme","multcomp")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only=TRUE)
#=================================  LOAD FUNCTIONS =================================
### Ben Bolker's function for calculating CIs on predictions from a merMod object and plotting the results from his RPubs GLMM worked examples
# http://rpubs.com/bbolker/glmmchapter
# by specifying re.form=NA we're saying that we want the population-level prediction, i.e. setting the random effects to zero and getting a prediction for an average (or unknown) group
# Computing confidence intervals on the predicted values is relatively easy if we're willing to completely ignore the random effects, and the uncertainty of the random effects
# this easy method produces similar width CIs to using the bootMer function in lme4, perhaps slightly wider CIs in some cases
# can change to alpha=0.16, approximately equal to 84% CIs
easyPredCI.lme <- function(model,newdata,alpha=alphalevel) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],
newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link (logistic) function: could also use plogis()
linkinv <- model@resp$family$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(lwr=pred0-crit*pred.se,
upr=pred0+crit*pred.se))
}
ls()
mod.high
i<-1
mod.spec
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
#   # new dataset contains all of the unique combinations of the different management interventions, replicated across the range of observed effect sizes for the dataset, replicated across species
#   unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
#   seq.effect.size <- seq(min(origdat$stan.effect.size), max(origdat$stan.effect.size), 0.1) # sequence of the range of effect sizes
#   x <- unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), each=length(seq.effect.size)),] # replicate each row of unique mgmtvars to the length of the effect size sequence
#   effect.mgmt <- data.frame(stan.effect.size=rep(seq.effect.size, times=nrow(unique.mgmtvars)), x) # merge effect sizes sequence and mgmtvars, now a unique combination of everything
#   newdat <- data.frame(effect.mgmt[rep(seq_len(nrow(effect.mgmt)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(effect.mgmt))) # replicate the whole dataset for each species
newdat$pred <- as.numeric(predict(plotmod, level=0, newdat))
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE")]
fits <- unique(fits)
plotdat[[i]] <- aggregate(fits[,c("pred","SE")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
newdat$pred <- as.numeric(predict(plotmod, level=0, newdat))
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$lci <- newdat$pred - (1.96*newdat$SE)
newdat$uci <- newdat$pred + (1.96*newdat$SE)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE")]
fits <- unique(fits)
plotdat[[i]] <- aggregate(fits[,c("pred","SE","lci","uci")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE","lci","uci")]
fits <- unique(fits)
plotdat[[i]] <- aggregate(fits[,c("pred","SE","lci","uci")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
head(plotdat[[i]])
plotdat <- list()
for (i in 1:length(mod.high)) {
# random effects not needed for new prediction
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
#   # new dataset contains all of the unique combinations of the different management interventions, replicated across the range of observed effect sizes for the dataset, replicated across species
#   unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
#   seq.effect.size <- seq(min(origdat$stan.effect.size), max(origdat$stan.effect.size), 0.1) # sequence of the range of effect sizes
#   x <- unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), each=length(seq.effect.size)),] # replicate each row of unique mgmtvars to the length of the effect size sequence
#   effect.mgmt <- data.frame(stan.effect.size=rep(seq.effect.size, times=nrow(unique.mgmtvars)), x) # merge effect sizes sequence and mgmtvars, now a unique combination of everything
#   newdat <- data.frame(effect.mgmt[rep(seq_len(nrow(effect.mgmt)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(effect.mgmt))) # replicate the whole dataset for each species
newdat$pred <- as.numeric(predict(plotmod, level=0, newdat))
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$lci <- newdat$pred - (1.96*newdat$SE)
newdat$uci <- newdat$pred + (1.96*newdat$SE)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE","lci","uci")]
fits <- unique(fits)
plotdat[[i]] <- aggregate(fits[,c("pred","SE","lci","uci")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
}
names(plotmod)
names(mod.high)
sum.fits <- aggregate(fits[,c("pred","SE","lci","uci")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
plotdat[[i]] <- data.frame(sum.fits, metric=names(mod.high)[i])
#----------   PLOTS OF EFFECTS OF HIGH-LEVEL INTERVENTIONS   ---------------
plotdat <- list()
for (i in 1:length(mod.high)) {
# random effects not needed for new prediction
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
#   # new dataset contains all of the unique combinations of the different management interventions, replicated across the range of observed effect sizes for the dataset, replicated across species
#   unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
#   seq.effect.size <- seq(min(origdat$stan.effect.size), max(origdat$stan.effect.size), 0.1) # sequence of the range of effect sizes
#   x <- unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), each=length(seq.effect.size)),] # replicate each row of unique mgmtvars to the length of the effect size sequence
#   effect.mgmt <- data.frame(stan.effect.size=rep(seq.effect.size, times=nrow(unique.mgmtvars)), x) # merge effect sizes sequence and mgmtvars, now a unique combination of everything
#   newdat <- data.frame(effect.mgmt[rep(seq_len(nrow(effect.mgmt)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(effect.mgmt))) # replicate the whole dataset for each species
newdat$pred <- as.numeric(predict(plotmod, level=0, newdat))
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$lci <- newdat$pred - (1.96*newdat$SE)
newdat$uci <- newdat$pred + (1.96*newdat$SE)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE","lci","uci")]
fits <- unique(fits)
sum.fits <- aggregate(fits[,c("pred","SE","lci","uci")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
plotdat[[i]] <- data.frame(sum.fits, metric=names(mod.high)[i])
}
plotfinal <- do.call(rbind, plotdat)
plotfinal
setwd(outputwd)
i<-1
plotsub <- plotdat[[i]]
plotsub
?pch
x <- c(1:nrow(plotsub))
plotsub$pch <- c(0,1,2,15,16,17)
plot(plotsub$pred~x, pch=plotsub$pch, cex=2, xlab="", ylab="", las=1, bty="n")
plot(plotsub$pred~x, pch=plotsub$pch, cex=1, xlab="", ylab="", las=1, bty="n")
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lci),max(plotsub$uci)), xlab="", ylab="", las=1, bty="n")
plotdat <- list()
for (i in 1:length(mod.high)) {
# random effects not needed for new prediction
plotmod <- mod.high[[i]] # model to plot results
origdat <- moddat[[i]] # original dataset
unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
newdat <- data.frame(unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(unique.mgmtvars)))
#   # new dataset contains all of the unique combinations of the different management interventions, replicated across the range of observed effect sizes for the dataset, replicated across species
#   unique.mgmtvars <- unique(origdat[,mgmtvars]) # unique combination of mgmtvars appearing in the original dataset
#   seq.effect.size <- seq(min(origdat$stan.effect.size), max(origdat$stan.effect.size), 0.1) # sequence of the range of effect sizes
#   x <- unique.mgmtvars[rep(seq_len(nrow(unique.mgmtvars)), each=length(seq.effect.size)),] # replicate each row of unique mgmtvars to the length of the effect size sequence
#   effect.mgmt <- data.frame(stan.effect.size=rep(seq.effect.size, times=nrow(unique.mgmtvars)), x) # merge effect sizes sequence and mgmtvars, now a unique combination of everything
#   newdat <- data.frame(effect.mgmt[rep(seq_len(nrow(effect.mgmt)), times=length(levels(origdat$species))),], species=rep(levels(origdat$species), each=nrow(effect.mgmt))) # replicate the whole dataset for each species
newdat$pred <- as.numeric(predict(plotmod, level=0, newdat))
Designmat <- model.matrix(eval(eval(plotmod$call$fixed)[-2]), newdat[-which(names(newdat) %in% "pred")])
predvar <- diag(Designmat %*% plotmod$varFix %*% t(Designmat))
newdat$SE <- sqrt(predvar)
newdat$lwr <- newdat$pred - (1.96*newdat$SE)
newdat$upr <- newdat$pred + (1.96*newdat$SE)
newdat$SE2 <- sqrt(predvar + plotmod$sigma^2)
fits <- newdat[,c("AE.level","reserve.desig","species","pred","SE","lwr","upr")]
fits <- unique(fits)
sum.fits <- aggregate(fits[,c("pred","SE","lwr","upr")], by=list(AE.level=fits$AE.level, reserve.desig=fits$reserve.desig), mean)
plotdat[[i]] <- data.frame(sum.fits, metric=names(mod.high)[i])
}
i<-1
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr),max(plotsub$upr)), xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
plotsub$pch <- c(0,1,2,15,16,17)
x <- c(1:nrow(plotsub))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr),max(plotsub$upr)), xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
plotsub <- plotdat[[i]]
plotsub$pch <- c(0,1,2,15,16,17)
x <- c(1:nrow(plotsub))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr),max(plotsub$upr)), xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
plotsub
min(plotsub$lwr)
max(plotsub$upr)
c(min(plotsub$lwr),max(plotsub$upr))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x)
axis(1, x, labels=rep("",nrow(plotfinal)), tick=TRUE)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotfinal)), tick=TRUE)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.06, srt = 30, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"))
text(c(2,5), par("usr")[3]-0.06, srt = 30, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.06, srt = 30, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"))
text(c(2,5), par("usr")[3]-0.06, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.06, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"))
text(c(2,5), par("usr")[3]-0.1, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.1, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"))
text(c(2,5), par("usr")[3]-0.2, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.1, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"))
text(c(2,5), par("usr")[3]-0.5, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.1, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-0.7, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.1, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-1, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.2, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-1.5, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.2, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-2.5, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="Predicted effect size", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.2, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-2.5, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
###-------- Output plot --------###
png("1a_high level intervention effect size.png", res=300, height=12, width=15, units="in", pointsize=20)
par(mfrow=c(2,2))
for (i in 1:length(plotdat)) {
par(mar=c(6,4,2,2))
plotsub <- plotdat[[i]]
plotsub$pch <- c(0,1,2,15,16,17)
x <- c(1:nrow(plotsub))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="Predicted effect size", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.2, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-1.5, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
dev.off()
}
i
metrics
png("1a_high level intervention effect size.png", res=300, height=12, width=15, units="in", pointsize=20)
par(mfrow=c(2,2))
for (i in 1:length(plotdat)) {
par(mar=c(6,4,2,2))
plotsub <- plotdat[[i]]
plotsub$pch <- c(0,1,2,15,16,17)
x <- c(1:nrow(plotsub))
plot(plotsub$pred~x, pch=plotsub$pch, cex=1.5, ylim=c(min(plotsub$lwr)*1.1,max(plotsub$upr)*1.1), xaxt="n", xlab="", ylab="Predicted effect size", las=1, bty="n")
arrows(x, plotsub$pred, x, plotsub$lwr, angle=90, length=0.05)
arrows(x, plotsub$pred, x, plotsub$upr, angle=90, length=0.05)
abline(h=0, lty=3, lwd=2)
axis(1, x, labels=rep("",nrow(plotsub)), tick=TRUE)
text(x, par("usr")[3]-0.2, srt = 0, pos=1, xpd = TRUE, labels=c("no AES","basic-level \n AES","higher-level \n AES"), cex=0.8)
text(c(2,5), par("usr")[3]-1.5, srt = 0, pos=1, xpd = TRUE, labels=c("no nature reserve/ \n designation", "nature reserve/ \n designation"), font=2)
title(metrics[i])
dev.off()
}
save.image("/Volumes/SAM250GB/BTO PC Documents/Git/eu_meadow_birds/workspaces/session 20160615.RData")
