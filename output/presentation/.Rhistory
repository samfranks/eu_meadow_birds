samplesize[samplesize > 10] <- 0
small.spp <- names(which(apply(samplesize, 1, sum)/apply(samplesize,1,length) > 0.7))
moth5 <- subset(moth4, !grepl(paste(small.spp, collapse="|"), spp))
moth5 <- droplevels(moth5)
levels(moth5$spp)
levels(moth3$spsp)
levels(moth3$spp)
length(levels(moth3$spp))
table(moth3$spp, moth3$year)
#load packages and document
cuckoo<-read.table("http://www.acsu.buffalo.edu/~ciaranwi/home_range.txt",
header=T,sep="\t")
require(lme4)
require(MuMIn)
as.factor (cuckoo$ID)
as.factor (cuckoo$Sex)
as.factor(cuckoo$MS_bin)
options(na.action = "na.fail")
# create global model and fit
fm<- lmer(log(KD_95)~ MS_bin + Forest + NDVI + Sex + Precip + MS_bin*Forest
+ MS_bin*NDVI  + MS_bin*Sex + MS_bin*Precip + Argos + Sample + (1|ID), data
= cuckoo, REML = FALSE)
# dredge but always include argos and sample
KD95<-dredge(fm,fixed=c("Argos","Sample"))
# model averaging
avgmod<-model.avg(KD95, fit=TRUE)
summary(avgmod)
options(scipen=6)
summary(avgmod)
summary(cuckoo)
load("/Volumes/SAM250GB/BTO PC Documents/Git/cuckoos/workspaces/habitat_use_logistic_models/outputwd/N2 models 200 km EU.RData")
?memory.limit
memory.limit()
memory.size()
find.package("rgeos")
library(installr)
updateR()
find.packages("cluster")
?packages
?find.package("cluster")
find.package("cluster")
library(mgcv)
library(MASS)
library(reshape)
library(reshape2)
library(ggplot2)
library(grid)
library(colorRamps)
library(plyr)
library(sp)
library(rgdal)
library(lme4)
library(nlme)
library(MuMIn)
library(lubridate)
library(chron)
library(lsmeans)
require(knitr)
setwd(paste(outputwd, "productivity vs mismatch/MS analysis v3", sep="/"))
---
title: "SPACE2 model outputs"
author: "Sam Franks"
date: "27 October 2015"
output: word_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("lsmeans")
load("~/Git/space2/workspaces/MS analysis results_2015-10-21.RData")
setwd(paste(outputwd, "productivity vs mismatch/MS analysis v3", sep="/"))
getwd()
setwd(paste(outputwd, "productivity vs mismatch/MS analysis v3", sep="/"))
outputwd
library(lsmeans)
# LOCAL
if(.Platform$OS =='windows') {
cluster <- FALSE
Mac <- FALSE
}
# HPCBTO
if(.Platform$OS=='unix' & Sys.getenv('USER')=='samf') {
cluster <- TRUE
Mac <- FALSE
Wales <- FALSE
}
# Mac
if(.Platform$OS=='unix' & Sys.getenv('USER')=='samantha') {
cluster <- FALSE
Mac <- TRUE
Wales <- FALSE
}
if (cluster) parentwd <- c("/users1/samf") # BTO cluster
if (!cluster) {
if (!Mac) parentwd <- c("C:/Users/samf/Documents")
if (Mac) parentwd <- c("/Volumes/SAM250GB/BTO PC Documents")
}
scriptswd <- paste(parentwd, "Git/space2/scripts", sep="/")
datawd <- paste(parentwd, "Git/space2/data", sep="/")
outputwd <- paste(parentwd, "Git/space2/output", sep="/")
workspacewd <- paste(parentwd, "Git/space2/workspaces", sep="/")
opar <- par()
keep.obj <- c(ls(),"keep.obj")
?rbind
install.packages('shiny')
setwd("~/")
getwd()
---
title: "SPACE2 model outputs"
output:
word_document:
reference_docx: refstyle.docx
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
```{r, results='asis'}
knitr::kable(mtcars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
a
summary(model.list)
formulas <- list()
partable <- list()
anovas <- list()
for (a in 1:length(model.list)) {
formulas[[a]] <- lapply(model.list[[a]], function(x) {
return(as.character(x$call[2]))
})
partable[[a]] <- lapply(model.list[[a]], function(x) {
return(summary(x)$tTable)
})
anovas[[a]] <- lapply(model.list[[a]], anova)
}
formulas[[1]]
names(formulas) <- mismatchvar.vec
names(partable) <- mismatchvar.vec
names(anovas) <- mismatchvar.vec
formulas <- list()
partable <- list()
anovas <- list()
for (a in 1:length(model.list)) {
formulas[[a]] <- lapply(model.list[[a]], function(x) {
return(as.character(x$call[2]))
})
partable[[a]] <- lapply(model.list[[a]], function(x) {
return(summary(x)$tTable)
})
anovas[[a]] <- lapply(model.list[[a]], anova)
}
names(formulas) <- mismatchvar.vec
names(partable) <- mismatchvar.vec
names(anovas) <- mismatchvar.vec
formulas
as.formula(formulas[[1]])
formulas[[1]]
as.formula(formulas[[1]][[1]])
partable[[1]][[1]]
anovas[[1]][[1]]
as.formula(formulas[[1]][[15]])
partable[[1]][[15]]
anovas[[1]][[15]]
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
tmp <- rnorm(100)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
tmp <- rnorm(100)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
as.formula(formulas[[1]][[15]])
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
a<-1
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
a<-1
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
a<-1
for (i in 1:length(formulas)) {
print(as.formula(formulas[[a]][[i]]))
# cat("\n")
print(partable[[a]][[i]])
# cat("\n")
print(anovas[[a]][[i]])
# cat("\n#============================\n", sep="\n")
}
length(formulas)
for (i in 1:19) {
print(as.formula(formulas[[a]][[i]]))
# cat("\n")
print(partable[[a]][[i]])
# cat("\n")
print(anovas[[a]][[i]])
# cat("\n#============================\n", sep="\n")
}
# tmp <- rnorm(100)
a<-1
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
# sink(paste("candidate model anovas and parameter estimates", "_", mismatchvar.vec[[a]], ".txt", sep=" "))
# tmp <- rnorm(100)
a<-1
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
# sink(paste("candidate model anovas and parameter estimates", "_", mismatchvar.vec[[a]], ".txt", sep=" "))
# tmp <- rnorm(100)
a<-1
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
# sink(paste("candidate model anovas and parameter estimates", "_", mismatchvar.vec[[a]], ".txt", sep=" "))
# tmp <- rnorm(100)
a<-1
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
# sink(paste("candidate model anovas and parameter estimates", "_", mismatchvar.vec[[a]], ".txt", sep=" "))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
mismatchvar.vec[1]
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
options(scipen=5)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
options(digits=4)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
?options
options(digits=3)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
options(digits=2)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
options(scipen=3, digits=3)
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
?print
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
rmarkdown::render(paste(outputwd, "productivity vs mismatch/MS analysis v3/markdown_model_outputs.Rmd", sep="/"))
#=================================  LOAD PACKAGES =================================
list.of.packages <- c("MASS","reshape","lme4","tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only=TRUE)
#=================================  SET DIRECTORY STRUCTURE  ================================
# LOCAL
if(.Platform$OS =='windows') {
cluster <- FALSE
Mac <- FALSE
}
# HPCBTO
if(.Platform$OS=='unix' & Sys.getenv('USER')=='samf') {
cluster <- TRUE
Mac <- FALSE
Wales <- FALSE
}
# Mac
if(.Platform$OS=='unix' & Sys.getenv('USER')=='samantha') {
cluster <- FALSE
Mac <- TRUE
Wales <- FALSE
}
#### SET DIRECTORY PATHS
# # Wales HPC cluster
# if (cluster) parentwd <- c("/home/samantha.franks/")
if (cluster) parentwd <- c("/users1/samf") # BTO cluster
if (!cluster) {
if (!Mac) parentwd <- c("C:/Users/samf/Documents/Git/eu_meadow_birds")
if (Mac) parentwd <- c("/Volumes/SAM250GB/BTO PC Documents/Git/eu_meadow_birds")
}
scriptswd <- paste(parentwd, "scripts", sep="/")
datawd <- paste(parentwd, "data", sep="/")
outputwd <- paste(parentwd, "output/presentation", sep="/")
workspacewd <- paste(parentwd, "workspaces", sep="/")
options(digits=6)
#=================================  LOAD DATA  ===============================
source(paste(scriptswd, "2_meta-analysis_data preparation.R", sep="/"))
png("Fig3_AES_site protection_metric.png", res=300, height=10, width=18, units="in", pointsize=20, bg="transparent")
par(mfcol=c(1,2), oma=c(3,5,3,1))
# -------    Load data and model   -----------
moddat <- readRDS(paste(workspacewd, "model dataset_0c.rds", sep="/"))
mod <- readRDS(paste(workspacewd, "models_0c_blme.rds", sep="/"))
# -------   Produce plotting dataset predictions   ---------
plotdat <- list()
for (i in 1:length(mod)) {
# dataset to predict over is the same as the original dataset
pred <- predict(mod[[i]], type="response", re.form=NA)
pred.CI <- easyPredCI(mod[[i]], moddat[[i]])
fits <- data.frame(pred, pred.CI, metric=moddat[[i]]$new.metric, mgmtvar=paste(mgmtvars[i], moddat[[i]][,mgmtvars[i]]), mgmt.type=i)
unique.fits <- unique(fits)
plotdat[[i]] <- aggregate(unique.fits[,c("pred","lwr","upr")], by=list(mgmtvar=unique.fits$mgmtvar, mgmt.type=unique.fits$mgmt.type, metric=unique.fits$metric), mean)
}
names(plotdat) <- mgmtvars
fig2c <- do.call(rbind, plotdat[c("AE","reserve.desig")])
fig2d <- do.call(rbind, plotdat[c("AE.level")])
### ---- Fig 2c: Policy level interventions plot ----
par(mar=c(3,3,2,2))
plotfinal <- fig2c
maxmetric <- levels(do.call(rbind, plotdat)$metric)
n <- length(maxmetric)
set.seed(2)
pch <- data.frame(metric=maxmetric, pch=rep(c(21,22,23),length.out=n), col=sample(c("blue","darkmagenta","orange"), n))
pch
plotfinal <- merge(plotfinal,pch, by="metric")
plotfinal <- plotfinal[order(plotfinal$mgmtvar,plotfinal$metric),]
plotfinal$rowid <- 1:nrow(plotfinal)
xloc.mgmtvars <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), mean)$x
xloc.divide <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), max)$x + 0.5
xloc.divide <- xloc.divide[-length(xloc.divide)]
x <- c(1:nrow(plotfinal))
plot(plotfinal$pred~x, ylim=c(0,1), xlim=c(min(plotfinal$rowid)-0.5,max(plotfinal$rowid)+0.2), pch=plotfinal$pch, bg=as.character(plotfinal$col), cex=1.8, xaxt="n", xlab="", ylab="", las=1, bty="n", col.axis="white", fg="white", col="white")
# axis(1, xloc.mgmtvars, labels=rep("",length(xloc.mgmtvars)), tick=TRUE)
abline(v=xloc.divide, lty=3, lwd=1.5, col="white")
text(xloc.mgmtvars, par("usr")[3]-0.05, srt = 0, pos=1, xpd = TRUE, labels=c("AES","site protection"), col="white")
arrows(x, plotfinal$pred, x, plotfinal$lwr, angle=90, length=0.05, col="white")
arrows(x, plotfinal$pred, x, plotfinal$upr, angle=90, length=0.05, col="white")
# title(xlab="Intervention", cex.lab=1.5, font=2, line=5)
# title(ylab="Predicted probability of success \n (significant positive impact)", cex.lab=1.5, font=2, line=3)
abline(h=successlevel, lty=3, lwd=2, col="white")
legend("topleft", legend=pch$metric, pch=pch$pch, pt.bg=as.character(pch$col), pt.cex=1.2, bty="n", xpd=TRUE, inset=c(0.01,-0.05), text.col="white", col="white")
mtext("Intervention", side=1, outer=TRUE, line=0.5, cex=1.2, col="white")
mtext("Predicted probability of success \n (significant positive impact)", side=2, outer=TRUE, cex=1.2, line=1.5, col="white")
### ---- Fig 2d: AES level interventions plot ----
par(mar=c(3,3,2,2))
plotfinal <- fig2d
maxmetric <- levels(do.call(rbind, plotdat)$metric)
n <- length(maxmetric)
set.seed(2)
pch <- data.frame(metric=maxmetric, pch=rep(c(21,22,23),length.out=n), col=sample(c("blue","darkmagenta","orange"), n))
pch
plotfinal <- merge(plotfinal,pch, by="metric")
plotfinal <- plotfinal[order(plotfinal$mgmtvar,plotfinal$metric),]
plotfinal$rowid <- 1:nrow(plotfinal)
xloc.mgmtvars <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), mean)$x
xloc.divide <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), max)$x + 0.5
xloc.divide <- xloc.divide[-length(xloc.divide)]
x <- c(min(plotfinal$rowid):max(plotfinal$rowid))
plot(plotfinal$pred~x, ylim=c(0,1), xlim=c(min(plotfinal$rowid)-0.5,max(plotfinal$rowid)+0.2), pch=plotfinal$pch, bg=as.character(plotfinal$col), cex=1.8, xaxt="n", xlab="", ylab="", las=1, bty="n", col.axis="white", fg="white", col="white")
abline(v=xloc.divide, lty=3, lwd=1.5, col="white")
text(xloc.mgmtvars, par("usr")[3]-0.05, srt = 0, pos=1, xpd = TRUE, labels=c("basic AES","higher AES"), col="white")
arrows(x, plotfinal$pred, x, plotfinal$lwr, angle=90, length=0.05, col="white")
arrows(x, plotfinal$pred, x, plotfinal$upr, angle=90, length=0.05, col="white")
abline(h=0.05, lty=3, lwd=2, col="white")
dev.off()
# can change to alpha=0.16, approximately equal to 84% CIs
easyPredCI <- function(model,newdata,alpha=alphalevel) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],
newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link (logistic) function: could also use plogis()
linkinv <- model@resp$family$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(lwr=pred0-crit*pred.se,
upr=pred0+crit*pred.se))
}
set.seed(2)
# =================================  SET LOGIC STATEMENTS  ====================
# default to plot when all are FALSE is results from overall analysis (0a)
species <- FALSE # plot the species-specific model results (0b)
metric <- FALSE # plot the metric-specific model results (0c)
habitat <- FALSE # plot the habitat-specific model results (0d)
alphalevel <- 0.05
successlevel <- 0.05
png("Fig3_AES_site protection_metric.png", res=300, height=10, width=18, units="in", pointsize=20, bg="transparent")
par(mfcol=c(1,2), oma=c(3,5,3,1))
# -------    Load data and model   -----------
moddat <- readRDS(paste(workspacewd, "model dataset_0c.rds", sep="/"))
mod <- readRDS(paste(workspacewd, "models_0c_blme.rds", sep="/"))
# -------   Produce plotting dataset predictions   ---------
plotdat <- list()
for (i in 1:length(mod)) {
# dataset to predict over is the same as the original dataset
pred <- predict(mod[[i]], type="response", re.form=NA)
pred.CI <- easyPredCI(mod[[i]], moddat[[i]])
fits <- data.frame(pred, pred.CI, metric=moddat[[i]]$new.metric, mgmtvar=paste(mgmtvars[i], moddat[[i]][,mgmtvars[i]]), mgmt.type=i)
unique.fits <- unique(fits)
plotdat[[i]] <- aggregate(unique.fits[,c("pred","lwr","upr")], by=list(mgmtvar=unique.fits$mgmtvar, mgmt.type=unique.fits$mgmt.type, metric=unique.fits$metric), mean)
}
names(plotdat) <- mgmtvars
fig2c <- do.call(rbind, plotdat[c("AE","reserve.desig")])
fig2d <- do.call(rbind, plotdat[c("AE.level")])
### ---- Fig 2c: Policy level interventions plot ----
par(mar=c(3,3,2,2))
plotfinal <- fig2c
maxmetric <- levels(do.call(rbind, plotdat)$metric)
n <- length(maxmetric)
set.seed(2)
pch <- data.frame(metric=maxmetric, pch=rep(c(21,22,23),length.out=n), col=sample(c("blue","darkmagenta","orange"), n))
pch
plotfinal <- merge(plotfinal,pch, by="metric")
plotfinal <- plotfinal[order(plotfinal$mgmtvar,plotfinal$metric),]
plotfinal$rowid <- 1:nrow(plotfinal)
xloc.mgmtvars <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), mean)$x
xloc.divide <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), max)$x + 0.5
xloc.divide <- xloc.divide[-length(xloc.divide)]
x <- c(1:nrow(plotfinal))
plot(plotfinal$pred~x, ylim=c(0,1), xlim=c(min(plotfinal$rowid)-0.5,max(plotfinal$rowid)+0.2), pch=plotfinal$pch, bg=as.character(plotfinal$col), cex=1.8, xaxt="n", xlab="", ylab="", las=1, bty="n", col.axis="white", fg="white", col="white")
# axis(1, xloc.mgmtvars, labels=rep("",length(xloc.mgmtvars)), tick=TRUE)
abline(v=xloc.divide, lty=3, lwd=1.5, col="white")
text(xloc.mgmtvars, par("usr")[3]-0.05, srt = 0, pos=1, xpd = TRUE, labels=c("AES","site protection"), col="white")
arrows(x, plotfinal$pred, x, plotfinal$lwr, angle=90, length=0.05, col="white")
arrows(x, plotfinal$pred, x, plotfinal$upr, angle=90, length=0.05, col="white")
# title(xlab="Intervention", cex.lab=1.5, font=2, line=5)
# title(ylab="Predicted probability of success \n (significant positive impact)", cex.lab=1.5, font=2, line=3)
abline(h=successlevel, lty=3, lwd=2, col="white")
legend("topleft", legend=pch$metric, pch=pch$pch, pt.bg=as.character(pch$col), pt.cex=1.2, bty="n", xpd=TRUE, inset=c(0.01,-0.05), text.col="white", col="white")
mtext("Intervention", side=1, outer=TRUE, line=0.5, cex=1.2, col="white")
mtext("Predicted probability of success \n (significant positive impact)", side=2, outer=TRUE, cex=1.2, line=1.5, col="white")
### ---- Fig 2d: AES level interventions plot ----
par(mar=c(3,3,2,2))
plotfinal <- fig2d
maxmetric <- levels(do.call(rbind, plotdat)$metric)
n <- length(maxmetric)
set.seed(2)
pch <- data.frame(metric=maxmetric, pch=rep(c(21,22,23),length.out=n), col=sample(c("blue","darkmagenta","orange"), n))
pch
plotfinal <- merge(plotfinal,pch, by="metric")
plotfinal <- plotfinal[order(plotfinal$mgmtvar,plotfinal$metric),]
plotfinal$rowid <- 1:nrow(plotfinal)
xloc.mgmtvars <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), mean)$x
xloc.divide <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), max)$x + 0.5
xloc.divide <- xloc.divide[-length(xloc.divide)]
x <- c(min(plotfinal$rowid):max(plotfinal$rowid))
plot(plotfinal$pred~x, ylim=c(0,1), xlim=c(min(plotfinal$rowid)-0.5,max(plotfinal$rowid)+0.2), pch=plotfinal$pch, bg=as.character(plotfinal$col), cex=1.8, xaxt="n", xlab="", ylab="", las=1, bty="n", col.axis="white", fg="white", col="white")
abline(v=xloc.divide, lty=3, lwd=1.5, col="white")
text(xloc.mgmtvars, par("usr")[3]-0.05, srt = 0, pos=1, xpd = TRUE, labels=c("basic AES","higher AES"), col="white")
arrows(x, plotfinal$pred, x, plotfinal$lwr, angle=90, length=0.05, col="white")
arrows(x, plotfinal$pred, x, plotfinal$upr, angle=90, length=0.05, col="white")
abline(h=0.05, lty=3, lwd=2, col="white")
dev.off()
getwd()
setwd(outputwd)
getwd()
png("Fig3_AES_site protection_metric.png", res=300, height=10, width=18, units="in", pointsize=20, bg="transparent")
par(mfcol=c(1,2), oma=c(3,5,3,1))
# -------    Load data and model   -----------
moddat <- readRDS(paste(workspacewd, "model dataset_0c.rds", sep="/"))
mod <- readRDS(paste(workspacewd, "models_0c_blme.rds", sep="/"))
# -------   Produce plotting dataset predictions   ---------
plotdat <- list()
for (i in 1:length(mod)) {
# dataset to predict over is the same as the original dataset
pred <- predict(mod[[i]], type="response", re.form=NA)
pred.CI <- easyPredCI(mod[[i]], moddat[[i]])
fits <- data.frame(pred, pred.CI, metric=moddat[[i]]$new.metric, mgmtvar=paste(mgmtvars[i], moddat[[i]][,mgmtvars[i]]), mgmt.type=i)
unique.fits <- unique(fits)
plotdat[[i]] <- aggregate(unique.fits[,c("pred","lwr","upr")], by=list(mgmtvar=unique.fits$mgmtvar, mgmt.type=unique.fits$mgmt.type, metric=unique.fits$metric), mean)
}
names(plotdat) <- mgmtvars
fig2c <- do.call(rbind, plotdat[c("AE","reserve.desig")])
fig2d <- do.call(rbind, plotdat[c("AE.level")])
### ---- Fig 2c: Policy level interventions plot ----
par(mar=c(3,3,2,2))
plotfinal <- fig2c
maxmetric <- levels(do.call(rbind, plotdat)$metric)
n <- length(maxmetric)
set.seed(2)
pch <- data.frame(metric=maxmetric, pch=rep(c(21,22,23),length.out=n), col=sample(c("blue","darkmagenta","orange"), n))
pch
plotfinal <- merge(plotfinal,pch, by="metric")
plotfinal <- plotfinal[order(plotfinal$mgmtvar,plotfinal$metric),]
plotfinal$rowid <- 1:nrow(plotfinal)
xloc.mgmtvars <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), mean)$x
xloc.divide <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), max)$x + 0.5
xloc.divide <- xloc.divide[-length(xloc.divide)]
x <- c(1:nrow(plotfinal))
plot(plotfinal$pred~x, ylim=c(0,1), xlim=c(min(plotfinal$rowid)-0.5,max(plotfinal$rowid)+0.2), pch=plotfinal$pch, bg=as.character(plotfinal$col), cex=1.8, xaxt="n", xlab="", ylab="", las=1, bty="n", col.axis="white", fg="white", col="white")
# axis(1, xloc.mgmtvars, labels=rep("",length(xloc.mgmtvars)), tick=TRUE)
abline(v=xloc.divide, lty=3, lwd=1.5, col="white")
text(xloc.mgmtvars, par("usr")[3]-0.05, srt = 0, pos=1, xpd = TRUE, labels=c("AES","site protection"), col="white")
arrows(x, plotfinal$pred, x, plotfinal$lwr, angle=90, length=0.05, col="white")
arrows(x, plotfinal$pred, x, plotfinal$upr, angle=90, length=0.05, col="white")
# title(xlab="Intervention", cex.lab=1.5, font=2, line=5)
# title(ylab="Predicted probability of success \n (significant positive impact)", cex.lab=1.5, font=2, line=3)
abline(h=successlevel, lty=3, lwd=2, col="white")
legend("topleft", legend=pch$metric, pch=pch$pch, pt.bg=as.character(pch$col), pt.cex=1.2, bty="n", xpd=TRUE, inset=c(0.01,-0.05), text.col="white", col="white")
mtext("Intervention", side=1, outer=TRUE, line=0.5, cex=1.2, col="white")
mtext("Predicted probability of success \n (significant positive impact)", side=2, outer=TRUE, cex=1.2, line=1.5, col="white")
### ---- Fig 2d: AES level interventions plot ----
par(mar=c(3,3,2,2))
plotfinal <- fig2d
maxmetric <- levels(do.call(rbind, plotdat)$metric)
n <- length(maxmetric)
set.seed(2)
pch <- data.frame(metric=maxmetric, pch=rep(c(21,22,23),length.out=n), col=sample(c("blue","darkmagenta","orange"), n))
pch
plotfinal <- merge(plotfinal,pch, by="metric")
plotfinal <- plotfinal[order(plotfinal$mgmtvar,plotfinal$metric),]
plotfinal$rowid <- 1:nrow(plotfinal)
xloc.mgmtvars <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), mean)$x
xloc.divide <- aggregate(plotfinal$rowid, list(plotfinal$mgmtvar), max)$x + 0.5
xloc.divide <- xloc.divide[-length(xloc.divide)]
x <- c(min(plotfinal$rowid):max(plotfinal$rowid))
plot(plotfinal$pred~x, ylim=c(0,1), xlim=c(min(plotfinal$rowid)-0.5,max(plotfinal$rowid)+0.2), pch=plotfinal$pch, bg=as.character(plotfinal$col), cex=1.8, xaxt="n", xlab="", ylab="", las=1, bty="n", col.axis="white", fg="white", col="white")
abline(v=xloc.divide, lty=3, lwd=1.5, col="white")
text(xloc.mgmtvars, par("usr")[3]-0.05, srt = 0, pos=1, xpd = TRUE, labels=c("basic AES","higher AES"), col="white")
arrows(x, plotfinal$pred, x, plotfinal$lwr, angle=90, length=0.05, col="white")
arrows(x, plotfinal$pred, x, plotfinal$upr, angle=90, length=0.05, col="white")
abline(h=0.05, lty=3, lwd=2, col="white")
dev.off()
